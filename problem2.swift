#if os(OSX) || os(iOS) || os(watchOS) || os(tvOS)
import Darwin
#else
import Glibc
#endif

/*
 Each new term in the fibonacci sequence is generated by adding the previous two terms. By starting with 1 an 2, 
 the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 By considering the terms in the fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */

/* 
 Conceptually simplest solution is to loop fib(n) through every value of n while fib(n) <= 4,000,000. On each iteration sum fib(n) if fib(n) % 2 == 0
 Conceivably this could be easier if we had some way to know ahead of time which values for n would yield fib(n) % 2 == 0. 
 In such a case we might be able to complete the calc with half the number of cycles.
 */

/* fibonacci function
 */
func fib(n: Int) -> Int {
    
    let d = Double(n)
    let phi = (1 + sqrt(5.0)) / 2 // assuming phi not in library
  
    /*
        p^d - (1 - p)^d
        ---------------  == fib(d)
            sqrt(5)
    
    */
    return Int((pow(phi, d) - pow((1 - phi), d)) / (sqrt(5.0)))
    
    
}

func sumFib(start: Int, maxValue: Int) -> Int {

    var n = start
    var v = 0
    var total = 0
    while v <= maxValue {
      let tempValue = fib(n)
      if tempValue % 2 == 0 {
      v += tempValue
      }
      n += 1

    }
    return v
}

print(sumFib(1, maxValue: 4_000_000))
